sudo: false

language: cpp

cache:
  apt: true
  ccache: true
  directories:
    - $HOME/.ccache
    - $CLING_BUILD_DEPS

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=500M
    - CCACHE_CPP2=1
    - TIMEOUT=0
    - secure: "DQSDJnYWR7kb2ylcE1e4GIfP9KJadHjG696HelK09zmsTJiRoxg2HhDnm3gHkrPh18AxYJAMW1rZHm0ZsnBKpS09NxOcPVseL+z3iWfBFpgCa2ueUMKHy/YBhNghmLOXVeQzGwol6iCU5xbO4ZMJHpytmQCH6Vm9ws7sg8kiatY="

# Do not build our sync branch.
branches:
  except:
    - /^__internal.*$/
  only:
    - master

matrix:
  # Abort all builds on a single failing matrix entry.
  fast_finish: true

  exclude:
    # Note: Workaround travis-ci/travis-ci#4681
    # Exclude default job which lacks our included environment variables.
    - os: osx
    - os: linux

  include:
    - os: linux
      env: DIST=pangolin COMPILER=g++-4.7 CCOMPILER=gcc-4.7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.7']
      compiler: gcc-4.7

    - os: linux
      env: DIST=pangolin COMPILER=g++-4.8 CCOMPILER=gcc-4.8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.8']
      compiler: gcc-4.8

    - os: linux
      env: DIST=pangolin COMPILER=g++-4.9 CCOMPILER=gcc-4.9
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      compiler: gcc-4.9

    - os: linux
      env: DIST=pangolin COMPILER=g++-5 CCOMPILER=gcc-5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5']
      compiler: gcc-5

    - os: linux
      env: DIST=pangolin COMPILER=g++-6 CCOMPILER=gcc-6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6']
      compiler: gcc-6

    - os: linux
      env: DIST=trusty COMPILER=g++-4.7 CCOMPILER=gcc-4.7
      sudo: required
      dist: trusty
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.7']
      compiler: gcc-4.7

    - os: linux
      env: DIST=trusty COMPILER=g++-4.8 CCOMPILER=gcc-4.8
      sudo: required
      dist: trusty
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.8']
      compiler: gcc-4.8

    - os: linux
      env: DIST=trusty COMPILER=g++-4.9 CCOMPILER=gcc-4.9
      sudo: required
      dist: trusty
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      compiler: gcc-4.9

    - os: linux
      env: DIST=trusty COMPILER=g++-5 CCOMPILER=gcc-5
      sudo: required
      dist: trusty
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5']
      compiler: gcc-5

    - os: linux
      env: DIST=trusty COMPILER=g++-6 CCOMPILER=gcc-6
      sudo: required
      dist: trusty
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6']
      compiler: gcc-6

    - os: linux
      env: CXXLIB=libstdc++ COMPILER=clang++-3.7 CCOMPILER=clang-3.7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
          packages: ['clang-3.7', 'libstdc++-5-dev']
      compiler: clang-3.7

    - os: linux
      env: CXXLIB=libstdc++ COMPILER=clang++-3.8 CCOMPILER=clang-3.8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.8']
          packages: ['clang-3.8', 'libstdc++-6-dev']
      compiler: clang-3.8

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode6.4
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.1
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.2
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode7.3
      compiler: clang

    - os: osx
      env: COMPILER=clang++ CCOMPILER=clang
      osx_image: xcode8
      compiler: clang

  allow_failures:
    # clang-3.5 crashes compiling clang-3.9 with libc++-3.9
    - env: CXXLIB=libc++ COMPILER=clang++-3.5 CCOMPILER=clang-3.5

install:
# If cmake is not in the cache, download it.
- |
  CLING_USER_ROOT=`dirname $TRAVIS_BUILD_DIR`
  export CLING_BUILD_DEPS="$CLING_USER_ROOT/deps"
  export CLING_LOCAL_BIN="$CLING_USER_ROOT/bin"
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Linux-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/bin/cmake
  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    brew install ccache python
    CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.0-Darwin-x86_64.tar.gz"
    export CMAKE=$CLING_BUILD_DEPS/cmake/CMake.app/Contents/bin/cmake
    PATH=/usr/local/opt/ccache/libexec:$PATH
    # Try to workaround travis-ci/travis-ci#6410 by
    # introducing a timeout fulction, which will timeout before the builder,
    # returning a 'fake' success (eg. 0), tricking it to store the cache.
  fi

  # Containers need to timeout before the buildscript exists
  if [ $TRAVIS_OS_NAME == 'osx' ] || [ "$DIST" == "trusty" ]; then
    TIMEOUT=2500 # Any more and Travis might cancel
  fi

  # Implement a platform-independent timeout function.
  function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

  if [ ! -f $CMAKE ]; then
    mkdir -pv $CLING_BUILD_DEPS/cmake
    travis_retry curl -k $CMAKE_URL | tar --strip-components=1 -xz -C $CLING_BUILD_DEPS/cmake
  fi

before_script:
 - $CMAKE --version
 - export CXX="ccache $COMPILER"
 - export CC="ccache $CCOMPILER"

script:
- |
  if [ -z $TRAVIS_TAG ]; then
    if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      # Move the tag to newest master
      git tag --force cling-nightlies HEAD
      git push --force https://$OAUTH_TOKEN@github.com/${TRAVIS_REPO_SLUG} cling-nightlies
    fi

    timeout $TIMEOUT tools/packaging/cpt.py --current-dev=tar --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG --skip-cleanup
  else
    tools/packaging/cpt.py --tarball-tag=$TRAVIS_TAG --with-cling-url=https://github.com/$TRAVIS_REPO_SLUG
  fi

  ### Fail if build not complete, but mark it as such for later
  RESULT=$?
  if [ $RESULT -ne 0 ]; then
    if [ $RESULT -eq 142 ]; then
      export CLING_BUILD_TIMEOUT=1
    fi
    exit $RESULT
  fi

- ccache -s

notifications:
  email:
    recipients:
      #- cling-dev@cern.ch
    on_success: change
    on_failure: always
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{message}"
      - "Build details: %{build_url}"
      - "Change view : %{compare_url}"


before_deploy:
- |
  export RELEASE_TARBALL=$(ls $HOME/ci/build/cling*.tar.bz2)
  if [[ $TRAVIS_TAG -eq "cling-nightlies" ]]; then
    NIGHTLY="`dirname $RELEASE_TARBALL`/`date "+%Y-%b-%d-"``basename $RELEASE_TARBALL`"
    echo "Renaming $RELEASE_TARBALL to $NIGHTLY"
    mv $RELEASE_TARBALL $NIGHTLY
    export RELEASE_TARBALL=$NIGHTLY
  fi
  echo "Deploying $RELEASE_TARBALL to GitHub releases"


deploy:
  provider: releases
  skip_cleanup: true
  api_key: $OAUTH_TOKEN
  file: '${RELEASE_TARBALL}'
  on:
    tags: true
    repo: $TRAVIS_REPO_SLUG

after_failure:
- |
  if [ "$CLING_BUILD_TIMEOUT" != "1" ]; then  
    echo "Dumping env."
    find $CLING_LOCAL_BIN -type f -print0 -exec cat {} \;
    $CMAKE --version
    $CC --version
    $CXX --version
    ls -al `which ld` && ld -v
    export
  fi
- |
  if [ "$CLING_BUILD_TIMEOUT" != "1" ]; then  
    echo "Dumping CMakeOutput.log"
    cat /home/travis/ci/build/builddir/CMakeFiles/CMakeOutput.log
  fi
- |
  if [ "$CLING_BUILD_TIMEOUT" != "1" ]; then  
    echo "Dumping CMakeError.log"
    cat /home/travis/ci/build/builddir/CMakeFiles/CMakeError.log
  fi
- |
  if [ "$CLING_BUILD_TIMEOUT" != "1" ]; then  
    echo "Dumping cling-compiledata.h..."
    COMPILE_DATA_H=$HOME/ci/build/builddir/tools/cling/lib/Interpreter/cling-compiledata.h
    cat $COMPILE_DATA_H

    echo "Running cling-compiledata compiler..."
    COMPDATA_CXX=$(cat $COMPILE_DATA_H | cut -c 18- | sed "s,\",,g")
    eval echo | LC_ALL=C $COMPDATA_CXX -xc++ -E -v -
  fi
- |
  if [ "$CLING_BUILD_TIMEOUT" != "1" ]; then  
    echo "Dumping `which ccache`"
    ccache -s
    ls -la /usr/lib/ccache/ || ls -la /usr/local/opt/ccache/libexec
  fi
